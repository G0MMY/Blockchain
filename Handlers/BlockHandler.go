package Handlers

import (
	"blockchain/Controllers"
	"blockchain/Models"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

func (h Handler) AddGenesisBlock(w http.ResponseWriter, r *http.Request) {
	if h.GetLength() > 0 {
		w.Header().Add("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode("Can't add Genesis Block on top of existing blocks")
	} else {
		outputs := append([]Models.Output{}, Models.Output{Amount: 10000, PublicKey: "2d2d2d2d2d424547494e20525341205055424c4943204b45592d2d2d2d2d0a4d49494343674b43416745416e38366136543851764a666e2f57463268325131666a30634e496d3464385347494573574144707947346b44486f697665792f770a70773344324e32456a7363706f742f6c692b767a69587264325132726879773430327549676b514b65597658683836624f734a2f656d657a5a34366f795462480a7a764766753072334a62545066726a777562494a3573734b4e547773394655676b5855673479442b2f77766e2b65476a75727269584d6e6c4a67645446556e690a643553377a43435a53486e555a74734e3935765061457445596d74733359454b2b5770686470652f4432585753634e43677a554949674b4c324d5879764349700a546b5879733438384b5633726171654c3164446e77777a484550486271457957544577696d4f34477a33474661667762623447365351377a6e5852457a5a6b680a2f324e766d6265434e4a757a7734674941336d307650554f724b63683663394e4d394f426d38654939386e586356626a4456663347417948354a714a6e626d470a4e594c6e364b2f4951457353456e624f3136446d5735714b3034477776337a6a4a55787076564b6a75542b4c45677a36414f6c4f6648736d6764746e6a514c480a6b5456457a78467178776b4f765946395747416c6231335964564a6d444439675933496e4272305a6a6c51744e6a4f683362363265555966617030793138384c0a4b45624a6c4f7035656139657143595958365976355469735434384d4c3364466c645a386546496a517353674963355572556f466532314578706338383471420a58307678704e51716463596533624958415033507566476e424d6937634e764834726a6366744a4f52466839486845464c73446150576b6f71575435613376640a67684a4777453970595a734b707053712f42337730342f4e5678734138772f4269327134414e4675397836706345347432346a51487873434177454141513d3d0a2d2d2d2d2d454e4420525341205055424c4943204b45592d2d2d2d2d0a"})
		transactions := append([]Models.Transaction{}, Models.Transaction{Outputs: outputs, Timestamp: time.Now().Unix()})
		block := Controllers.CreateBlock([]byte{0}, transactions)

		if result := h.DB.Create(&block); result.Error != nil {
			w.Header().Add("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(result.Error)
		} else {
			w.Header().Add("Content-Type", "application/json")
			w.WriteHeader(http.StatusCreated)
			json.NewEncoder(w).Encode(block)
		}
	}
}

//2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d49494a4b51494241414b43416745416e38366136543851764a666e2f57463268325131666a30634e496d3464385347494573574144707947346b44486f69760a65792f7770773344324e32456a7363706f742f6c692b767a69587264325132726879773430327549676b514b65597658683836624f734a2f656d657a5a34366f0a795462487a764766753072334a62545066726a777562494a3573734b4e547773394655676b5855673479442b2f77766e2b65476a75727269584d6e6c4a6764540a46556e69643553377a43435a53486e555a74734e3935765061457445596d74733359454b2b5770686470652f4432585753634e43677a554949674b4c324d58790a76434970546b5879733438384b5633726171654c3164446e77777a484550486271457957544577696d4f34477a33474661667762623447365351377a6e5852450a7a5a6b682f324e766d6265434e4a757a7734674941336d307650554f724b63683663394e4d394f426d38654939386e586356626a4456663347417948354a714a0a6e626d474e594c6e364b2f4951457353456e624f3136446d5735714b3034477776337a6a4a55787076564b6a75542b4c45677a36414f6c4f6648736d6764746e0a6a514c486b5456457a78467178776b4f765946395747416c6231335964564a6d444439675933496e4272305a6a6c51744e6a4f683362363265555966617030790a3138384c4b45624a6c4f7035656139657143595958365976355469735434384d4c3364466c645a386546496a517353674963355572556f4665323145787063380a3834714258307678704e51716463596533624958415033507566476e424d6937634e764834726a6366744a4f52466839486845464c73446150576b6f715754350a6133766467684a4777453970595a734b707053712f42337730342f4e5678734138772f4269327134414e4675397836706345347432346a5148787343417745410a41514b434167425542664e5a552f6c657a3567416c3341557539474d6347455746707452445a6c662f56717941416a6a42575549647547644b5a576b6f4134720a526a3165504d5664683839506846336d4752337638386f4f4a6d67796355577a43456468704f394c7a6f75376c32776a5663623057675051312b61796e6b52580a32354361324c6949626f445467684c477346624c71726f514e586f4d514d4e7236487471616a3473476b46562b744474374a46354c7a79313473556144712b330a49695332414b683239424968384742612b386757333169384667394a47472f71524e73474934744a2b55704e5a6d4c43547768736a35655335337445566d37480a6a6a595a6f664958663852385258793242302f6254753870544374794c6b32366a7477783067524e7432704e644b34586e36376a534c437355536d592b4256440a67304d496d68306f5836756d2b43545a665265634737777644506f507778527a564f706669547935716877497338624373374f666e5547376f374e744e334e4c0a556b6f6242617469426e6264385876445254354974526b4c594e32414c49524e43346b59436f7645474f51744d5752642f5944457379635a6e6e6c6536492b670a2b74384646556a502f7455365a4138597239743334784358633054706f394e45524d3977774858454b327657354c3643724c364b7737322b4e4c6e526346376e0a372b643350486a546e6d692b4d6a6b5a762b57776547583774496e4c376d4e4f63684f756f444c6a75385472474c68433243674637486b5145414e74734171340a632b744f6b46412b3262734e666438535533783779566b4b5045396863506f672f64415476556441664548726663636976316658532b70494c314e6f5437724f0a4d51483573726537783477743050767133526a766f3834526f5364715047534574705339504e4d7a332b67657051765749514b43415145417a725270594873490a2f44352b6b314861737a6f6979793056444838367037673670742b6655756743586b6830506e5566584c3555387a5448676f316c7552304939417368444f4a530a432b4232783133576a3657705555515a664365784542433964794a6572707939416c48724e6a364c443132583265326a4a712f6d3362356f5243484d47766f500a4a5262476f63416b617756424947654e5030773552597471634b2b65723647537739526c4c6d6e6e555a6f2b4c635634563445576c7035683631466c336954720a343465316a4873324b436e6c4e31546c50332b6667336b2b2f4c356d724b4e3549425274384c6d667573595073454934386a79386b7053757a452f53574a53320a42344f5753386c36693370394f4e6b64442b33665545794272684a43396a5273746b4354776f2b6b61733163636b34497838362f7a7948314b696e767273414b0a6d61717964325144424354724b514b434151454178657348734565322f7a475a664b4a57745066414473325a57396147435553505a5354315241306d59436d410a324832563651396572773054694e6d6554766164317037434d576d31336355595168596a7663664c6631785749453944436d765843725a4e45433041556b50560a4b67364c2f4c35716561327876734f6952503955324b706547624668366344556b667856586b7035313948754d78625a31615a453033427345575268334856440a2f356b337437336743485248456f62727a713248632b4e325132747059524f6a6a6d6c4f516a31556a39362f597848454850386a6b54357853773567495654390a47795139514b42674248504c526b564467334c6e5870664e6d49787978657542616947337a6e6b635478516a636c6c374175613555474153475a6839566645380a7667784543486c4f455773756a5469712f5561784b614d6b70732b47635a596430566d6f6f6f76456f774b43415142654f656d7266497164436851444c68596e0a43344a6534683874516a5a487a4869594a32706d6a624b2b72674b6e6b6861493359363243304a445a6865503667647830447a78745a3233496b796a4630692b0a314d4b35632f5332487858632f2f534f6756467541613837686f4a56694f3831517648382b7849626961595251554967684e4f5a484a4b5930716762686735540a35754a49566b77534a626f5a314c4c6879587a7144527074514c3462435658555968366b474e65423943754b33346f396a69364574496e2f6635616f416d61750a716d4a39396170485a764d644b4d456f7a3962594c66454353613351525a336c7333486c5a4671334f693677467930546e2f4f4151394979334b342f77416d6e0a32562b4a385a634938754f5170442b6454562f5041686a6f66386d627349552f316e756b38364f58436331774b386570763949743941636841366f314f4a63540a5a597a35416f4942415143564861513455332f7a75346e35316c48666e503474365166506f7378763953445977735372316743413253524465444e58576759720a65333270554e53756836366141686b726f3471726f52444b30655678326a4e664c4e4754484554566544535831497778554d5a364e4c4e4a4d5a6156415634310a6551462f5365526265636953536149475635662b78784d68506d325055697545794a31674471706e42784f352f6d7a646d62554670624271786953746f6a68470a426c31352f763978513172586e4a774135632b4b6e594a51444e55796f5153794e4e416273306e2f30746359576d522f65554243504d644b434c37426a314e6f0a5a316e5441754b41436a5636466f4f486d4f4873627169647276504f63333835735747586951566552546c2f376a4955364d67643156692f6b337736716a4b410a657a47696f7678705154612f7554516e48686f635145384d36544664376c4a6a416f49424151434d2f39346c5575796c64744974627a614b41365164357a725a0a482b4f66516f347338623164583868617850735347644c5a5035734f4b4c554d42724849794950446d336c3642586f6a512b4c56304b4f33614c4a5a7a5434580a4d683032523674644d47476c376e3063305350383978716f537a38583337396c334968546f67505a78456f64614856316c41726a784b75666f4e6d3941366e640a7737524a55686a546f55762b503041426d4b4f686d5431324943777435587670757562642b42796f687565634f71663778504c376341476c4278644f666c70350a3662416a39365055506f31342b7233777a5a4a644d396339364a47776c73524f42354379525672324f64756568393230447139486b75582b644155726f6461310a57764830342b684f492f58536f786c474a6c57357241696f796e4572346b4278765459562f624b496b776572576b765737505366514b6378536855310a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a

func (h Handler) AddBlock(w http.ResponseWriter, r *http.Request) {
	transactions := h.GetMemPoolTransactions()
	memPoolTransactions := Controllers.FindBestMemPoolTransactions(transactions, 4)
	ids := Controllers.GetMemPoolTransactionsIds(memPoolTransactions)
	block := Controllers.CreateBlock(h.getPreviousHash(), memPoolTransactions)

	if block.PreviousHash != nil {
		if result := h.DB.Create(block); result.Error != nil {
			w.Header().Add("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(result.Error)
		} else {
			if ids == nil || h.LinkTransactions(*block, ids) {
				w.Header().Add("Content-Type", "application/json")
				w.WriteHeader(http.StatusCreated)
				json.NewEncoder(w).Encode(block)
			} else {
				w.Header().Add("Content-Type", "application/json")
				w.WriteHeader(http.StatusBadRequest)
				json.NewEncoder(w).Encode("There was an error with the transactions")
			}
		}
	} else {
		w.Header().Add("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode("Can't add block on top of nothing")
	}
}

func (h Handler) getPreviousHash() []byte {
	return Controllers.Hash(h.GetLastBlock())
}

func (h Handler) GetLastBlock() *Models.Block {
	var block Models.Block

	if result := h.DB.Last(&block); result.Error != nil {
		fmt.Println(result.Error)
	}

	return &block
}
